---
# Guides:
  #: http://www.digitesters.com/install-sabnzbd-on-centos-7/

- name: Create download dirs
  file: dest="{{ sab_download_dir }}/{{ item }}" state=directory recurse=yes
  with_items:
      - complete/movies
      - complete/tvshows
      - complete/music
      - incomplete
      - nzb_watched
      - nzb_backup

- name: Take ownership of download dirs
  file: dest="{{ sab_download_dir }}" recurse=yes
        owner={{ stack_user }} group={{ stack_user_group }}

- name: Install prerequisites
  yum:  pkg={{ item }} state=installed update_cache=yes
  with_items:
      # Common
      - wget
      - git
      # Compiler
      - gcc
      - gcc-c++
      - libgcc
      - make
      - cmake
      # Python
      - python
      - python-libs
      - python-configobj
      - python-pycurl
      - python-pyudev
      - python-setuptools
      - python-cheetah
      - python-devel
      - python-tools
      - python-feedparser
      - par2cmdline     
      - pyOpenSSL
      # OpenSSL
      - openssl
      - openssl-devel
      - openssl-libs
      # Compression
      - gzip
      - bzip2
      - p7zip
      - unrar
      - unzip

  # par2 multicore guide
  # https://forums.sabnzbd.org/viewtopic.php?f=16&t=18793#p99702

# Yenc
- name: Yenc --> Download file
  get_url:
    url: "{{ sab_yenc_link }}"
    dest: "/tmp/{{ sab_yenc_filename }}"
    validate_certs: False
  register: downloaded_yenc
  
- name: Yenc --> Extract file
  unarchive:
    src: "/tmp/{{ sab_yenc_filename }}"
    dest: "/tmp"
    copy: no
  sudo: yes
  when: downloaded_yenc|changed
  
- name: Yenc --> Remove download file
  file: path="/tmp/{{ sab_yenc_filename }}" state=absent

- name:     Yenc --> Build
  command:  python setup.py build
  args:
    chdir: "/tmp/{{ sab_yenc_name }}"

- name:     Yenc --> Install
  command:  python setup.py install
  args:
    chdir: "/tmp/{{ sab_yenc_name }}"

- name: Yenc --> Remove files
  file: path="/tmp/{{ sab_yenc_name }}" state=absent

  #pyOpenSSL
- name: pyOpenSSL --> Download file
  command: pip install pyopenssl
  sudo: yes

- name: Clone repo
  git:  repo="{{ sab_repo }}"
        dest={{ sab_install_dir }}

- name: Create data dir
  file: dest={{ sab_config_dir }} state=directory recurse=yes

- name: Restore Backup --> Copy archive
  copy: src={{ sab_restore_file }} dest=/tmp
        owner={{ stack_user }} group={{ stack_user_group }}
  when: sab_restore_file is defined

- name: Restore Backup --> Extract archive
  unarchive:
    src: /tmp/sabnzbd_backup.tar.gz
    dest: "{{ sab_config_dir }}"
    copy: no
  sudo: yes
  when: sab_restore_file is defined

- name: Set dir owner
  file: dest="{{ install_dir }}" owner={{ stack_user }}
        group={{ stack_user_group }} recurse=yes

- name: Add service
  template: src=sabnzbd.service.j2
            dest=/etc/systemd/system/sabnzbd.service
            owner=root group=root mode=0644

- name:     Enable service
  service:  name=sabnzbd.service enabled=yes state=started

- name: Stat backup target
  stat: path={{ sab_backup_target }}
  register: backup_dir

- name: Create backup dir
  file: path={{ sab_backup_target }} state=directory
        owner=root group=root
  when: backup_dir.stat.exists == False

- name: Stat backup script dir
  stat: path={{ sab_backup_script_dir }}
  register: backup_script_dir

- name: Create backup script dir
  file: path={{ sab_backup_script_dir }} state=directory
        owner=root group=root
  when: backup_script_dir.stat.exists == False

- name: Create backup script
  template: src=sabnzbd_backup.sh.j2
            dest="{{ sab_backup_script_dir }}/sabnzbd_backup.sh"
            owner=root group=root mode="a+x"

- name: Create cron backup
  cron: name="Sabnzbd Backup"
        hour="04" minute="10"
        user="root" job="{{ sab_backup_script_dir }}/sabnzbd_backup.sh"
        state=present
